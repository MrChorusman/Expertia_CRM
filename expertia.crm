import React, { useState, useEffect, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import {
    getAuth,
    signInAnonymously,
    onAuthStateChanged,
    signInWithCustomToken
} from 'firebase/auth';
import {
    getFirestore,
    collection,
    addDoc,
    onSnapshot,
    doc,
    updateDoc,
    deleteDoc,
    query,
    runTransaction,
    setDoc
} from 'firebase/firestore';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';

// --- Íconos (SVG) ---
const PlusIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>;
const UserIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>;
const EditIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>;
const TrashIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>;
const BuildingIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>;
const MailIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>;
const PhoneIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>;
const CheckSquareIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>;
const MapPinIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>;
const TrendingUpIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>;
const DollarSignIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>;
const BellIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path><path d="M13.73 21a2 2 0 0 1-3.46 0"></path></svg>;
const MessageSquareIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>;
const SendIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>;

// --- Constantes de la aplicación ---
const FUNNEL_TAGS = { 'Lead': 'bg-gray-200 text-gray-800', 'Primer Contacto': 'bg-blue-200 text-blue-800', 'Interesado': 'bg-cyan-200 text-cyan-800', 'Demo Realizada': 'bg-indigo-200 text-indigo-800', 'Negociación': 'bg-purple-200 text-purple-800', 'En Cierre': 'bg-orange-200 text-orange-800', 'Ganado': 'bg-green-200 text-green-800', 'Perdido': 'bg-red-200 text-red-800' };
const CONTACT_PREFERENCES = { 'Email': <MailIcon />, 'Teléfono': <PhoneIcon />, 'WhatsApp': <MessageSquareIcon />, 'Visita Comercial': <BuildingIcon /> };
const INVOICE_STATUSES = { 'Borrador': 'bg-gray-200 text-gray-800', 'Enviada': 'bg-blue-200 text-blue-800', 'Pagada': 'bg-green-200 text-green-800', 'Vencida': 'bg-red-200 text-red-800' };
const VAT_RATE = 0.21;

// --- Configuración de Firebase ---
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-crm-app';

// --- Componente Principal: App ---
export default function App() {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [userProfile, setUserProfile] = useState(null);

    const [clients, setClients] = useState([]);
    const [invoices, setInvoices] = useState([]);
    const [products, setProducts] = useState([]);
    const [activeView, setActiveView] = useState('dashboard');
    const [selectedItem, setSelectedItem] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [filterTag, setFilterTag] = useState('all');

    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestoreDb = getFirestore(app);
            const firebaseAuth = getAuth(app);
            setDb(firestoreDb);
            setAuth(firebaseAuth);

            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    try {
                        if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                            await signInWithCustomToken(firebaseAuth, __initial_auth_token);
                        } else {
                            await signInAnonymously(firebaseAuth);
                        }
                    } catch (error) { console.error("Error en el inicio de sesión:", error); }
                }
                setIsAuthReady(true);
            });
            return () => unsubscribe();
        } catch (error) {
            console.error("Error al inicializar Firebase:", error);
            setIsLoading(false);
        }
    }, []);

    // Listeners de Firestore
    useEffect(() => {
        if (!isAuthReady || !db || !userId) return;
        setIsLoading(true);
        const paths = {
            clients: `/artifacts/${appId}/users/${userId}/clients`,
            invoices: `/artifacts/${appId}/users/${userId}/invoices`,
            products: `/artifacts/${appId}/users/${userId}/products`,
            profile: `/artifacts/${appId}/users/${userId}/profile/main` // RUTA CORREGIDA
        };

        const unsubClients = onSnapshot(query(collection(db, paths.clients)), (snapshot) => { setClients(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))); setIsLoading(false); });
        const unsubInvoices = onSnapshot(query(collection(db, paths.invoices)), (snapshot) => { setInvoices(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))); });
        const unsubProducts = onSnapshot(query(collection(db, paths.products)), (snapshot) => { setProducts(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))); });
        const unsubProfile = onSnapshot(doc(db, paths.profile), (doc) => { setUserProfile(doc.data()); });

        return () => { unsubClients(); unsubInvoices(); unsubProducts(); unsubProfile(); };
    }, [isAuthReady, db, userId]);
   
    // --- Funciones CRUD ---
    const handleSave = async (collectionName, data) => {
        if (!db || !userId) return;
        const collectionPath = `/artifacts/${appId}/${collectionName}`; // Se mantiene genérico, pero los callers deben ser específicos
        const { id, ...dataToSave } = data;
        try {
            if (id) {
                await updateDoc(doc(db, collectionPath, id), dataToSave);
            } else {
                await addDoc(collection(db, collectionPath), { ...dataToSave, createdBy: userId });
            }
        } catch (error) { console.error(`Error guardando en ${collectionName}:`, error); }
    };

    const handleDelete = async (collectionName, docId) => {
        if (!db || !userId) return;
        if (window.confirm('¿Estás seguro de que quieres eliminar este elemento?')) {
            try {
                await deleteDoc(doc(db, `/artifacts/${appId}/${collectionName}`, docId));
            } catch (error) { console.error(`Error eliminando de ${collectionName}:`, error); }
        }
    };
   
    const handleSaveClient = async (clientData) => {
        await handleSave(`users/${userId}/clients`, clientData);
        setActiveView('dashboard');
        setSelectedItem(null);
    };
   
    const handleSaveProfile = async (profileData) => {
        if (!db || !userId) return;
        const profileRef = doc(db, `/artifacts/${appId}/users/${userId}/profile`, 'main');
        try {
            await setDoc(profileRef, profileData, { merge: true });
            setActiveView('dashboard');
        } catch(error) {
            console.error("Error guardando el perfil:", error);
        }
    };

    const getNextInvoiceNumber = async (type) => {
        const counterRef = doc(db, `/artifacts/${appId}/public/data/counters`, type); // RUTA CORREGIDA
        let nextNumber;
        await runTransaction(db, async (transaction) => {
            const counterDoc = await transaction.get(counterRef);
            if (!counterDoc.exists()) {
                const startValue = type === 'EXP' ? 7 : 0;
                transaction.set(counterRef, { current: startValue + 1 });
                nextNumber = startValue + 1;
            } else {
                const newCurrent = counterDoc.data().current + 1;
                transaction.update(counterRef, { current: newCurrent });
                nextNumber = newCurrent;
            }
        });
        const prefix = type === 'EXP' ? 'EXP' : 'ALQ';
        return `${prefix}${String(nextNumber).padStart(3, '0')}`;
    };

    const handleSaveInvoice = async (invoiceData, convertFromProforma = false) => {
        let dataToSave = { ...invoiceData };
        if (convertFromProforma || !dataToSave.id) {
             if (dataToSave.type !== 'Factura Proforma') {
                dataToSave.invoiceNumber = await getNextInvoiceNumber(dataToSave.invoiceSeries);
            } else {
                dataToSave.invoiceNumber = `PROFORMA-${Date.now()}`;
            }
        }
        await handleSave(`users/${userId}/invoices`, dataToSave);
        setActiveView('accounting');
    };

    const handleConvertToInvoice = async (proformaInvoice) => {
        const invoiceData = {
            ...proformaInvoice,
            type: 'Factura',
            status: 'Enviada',
        };
        await handleSaveInvoice(invoiceData, true);
    };

    const handleRegisterPayment = async (invoice, paymentAmount) => {
        if (!db || !invoice || !paymentAmount) return;
        const newTotalPaid = (invoice.totalPaid || 0) + paymentAmount;
        const updatedInvoice = {
            ...invoice,
            totalPaid: newTotalPaid,
            status: newTotalPaid >= invoice.total ? 'Pagada' : 'Enviada',
        };
        await handleSave(`users/${userId}/invoices`, updatedInvoice);
        const paymentData = { amount: paymentAmount, date: new Date().toISOString().split('T')[0], method: 'Transferencia' };
        await addDoc(collection(db, `/artifacts/${appId}/users/${userId}/invoices/${invoice.id}/payments`), paymentData);
        setSelectedItem(updatedInvoice);
    };

    const filteredClients = useMemo(() => clients.filter(client =>
        (searchTerm === '' || client.name.toLowerCase().includes(searchTerm.toLowerCase()) || client.clinic.toLowerCase().includes(searchTerm.toLowerCase())) &&
        (filterTag === 'all' || client.tag === filterTag)
    ), [clients, searchTerm, filterTag]);

    const renderView = () => {
        switch (activeView) {
            case 'profile': return <ProfileForm userProfile={userProfile} onSave={handleSaveProfile} onBack={() => setActiveView('dashboard')} />;
            case 'bulkCommunication': return <BulkCommunication clients={clients} onBack={() => setActiveView('dashboard')} />;
            case 'addClient': return <ClientForm onSave={handleSaveClient} onCancel={() => setActiveView('dashboard')} />;
            case 'editClient': return <ClientForm client={selectedItem} onSave={handleSaveClient} onCancel={() => setActiveView('dashboard')} />;
            case 'detailClient': return <ClientDetail client={selectedItem} db={db} userId={userId} onEdit={() => { setSelectedItem(selectedItem); setActiveView('editClient'); }} onDelete={() => handleDelete(`users/${userId}/clients`, selectedItem.id)} onBack={() => setActiveView('dashboard')} onCreateInvoice={() => { setSelectedItem({ client: selectedItem }); setActiveView('createInvoice'); }} onGenerateConsent={() => { setSelectedItem(selectedItem); setActiveView('consentForm'); }} />;
            case 'consentForm': return <ConsentForm client={selectedItem} onBack={() => { setSelectedItem(selectedItem); setActiveView('detailClient'); }} />;
            case 'accounting': return <AccountingDashboard invoices={invoices} clients={clients} products={products} onSaveProduct={(p) => handleSave(`users/${userId}/products`, p)} onDeleteProduct={(id) => handleDelete(`users/${userId}/products`, id)} onCreateInvoice={() => { setSelectedItem(null); setActiveView('createInvoice'); }} onViewInvoice={(invoice) => { setSelectedItem(invoice); setActiveView('viewInvoice'); }} onDeleteInvoice={(id) => handleDelete(`users/${userId}/invoices`, id)} />;
            case 'createInvoice': return <InvoiceForm clients={clients} products={products} onSave={handleSaveInvoice} onCancel={() => setActiveView('accounting')} invoiceData={selectedItem} />;
            case 'viewInvoice': return <InvoiceDetail invoice={selectedItem} clients={clients} onBack={() => setActiveView('accounting')} onRegisterPayment={handleRegisterPayment} db={db} userId={userId} onConvertToInvoice={handleConvertToInvoice} />;
            case 'reports': return <ReportsDashboard allInvoices={invoices} />;
            default: return <Dashboard clients={filteredClients} onAddClient={() => setActiveView('addClient')} onBulkComm={() => setActiveView('bulkCommunication')} onViewClient={(client) => { setSelectedItem(client); setActiveView('detailClient'); }} onEditClient={(client) => { setSelectedItem(client); setActiveView('editClient'); }} onDeleteClient={(id) => handleDelete(`users/${userId}/clients`, id)} searchTerm={searchTerm} setSearchTerm={setSearchTerm} filterTag={filterTag} setFilterTag={setFilterTag} />;
        }
    };

    return (
        <div className="bg-gray-50 min-h-screen font-sans">
            <Header userProfile={userProfile} activeView={activeView} setActiveView={setActiveView} />
            <main className="p-4 sm:p-6 md:p-8">{renderView()}</main>
        </div>
    );
}

// --- Componentes ---
function Header({ userProfile, activeView, setActiveView }) {
    const navItemClass = (viewName) => `cursor-pointer py-2 px-3 rounded-md text-sm font-medium flex items-center gap-2 ${activeView.startsWith(viewName) ? 'bg-[#006666] text-white' : 'text-gray-600 hover:bg-gray-200'}`;
    return (
        <header className="bg-white shadow-md sticky top-0 z-10">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between items-center h-20">
                    <div className="flex items-center"><img src="https://storage.googleapis.com/gemini-generative-ai-api/f55a1dda-6560-4321-aidb-53f36780a82f" alt="Expertia Medical Solutions Logo" className="h-12 w-auto" /></div>
                    <nav className="flex items-center gap-4">
                        <span onClick={() => setActiveView('dashboard')} className={navItemClass('dashboard')}><UserIcon width={16} height={16} /> Clientes</span>
                        <span onClick={() => setActiveView('accounting')} className={navItemClass('accounting')}><DollarSignIcon /> Contabilidad</span>
                        <span onClick={() => setActiveView('reports')} className={navItemClass('reports')}><TrendingUpIcon width={16} height={16} /> Informes</span>
                    </nav>
                    <div className="flex items-center gap-3 cursor-pointer" onClick={() => setActiveView('profile')}>
                        <div className="text-sm text-gray-600">Mi Perfil</div>
                        <img src={userProfile?.photoURL || 'https://placehold.co/40x40/008080/FFFFFF?text=P'} alt="Perfil" className="h-10 w-10 rounded-full object-cover" />
                    </div>
                </div>
            </div>
        </header>
    );
}

function Dashboard({ clients, onAddClient, onBulkComm, onViewClient, onEditClient, onDeleteClient, searchTerm, setSearchTerm, filterTag, setFilterTag }) {
    const stats = useMemo(() => {
        const tagCounts = {};
        Object.keys(FUNNEL_TAGS).forEach(tag => tagCounts[tag] = 0);
        clients.forEach(client => { if (tagCounts[client.tag] !== undefined) tagCounts[client.tag]++; });
        return { total: clients.length, newLeads: tagCounts['Lead'] || 0, won: tagCounts['Ganado'] || 0 };
    }, [clients]);

    return (
        <div className="space-y-6">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <h1 className="text-3xl font-bold text-gray-900">Dashboard de Clientes</h1>
                <div className="flex gap-2">
                    <button onClick={onBulkComm} className="flex items-center gap-2 bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-blue-700"><SendIcon width={16} height={16} />Comunicación</button>
                    <button onClick={onAddClient} className="flex items-center gap-2 bg-[#008080] text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-[#006666]"><PlusIcon />Añadir Cliente</button>
                </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                <StatCard title="Total de Clientes" value={stats.total} icon={<UserIcon />} />
                <StatCard title="Nuevos Leads" value={stats.newLeads} icon={<PlusIcon />} />
                <StatCard title="Clientes Ganados" value={stats.won} icon={<CheckSquareIcon />} />
            </div>
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
                <div className="flex flex-col md:flex-row gap-4 mb-4">
                    <input type="text" placeholder="Buscar por nombre o clínica..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="flex-grow p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#008080] focus:border-transparent" />
                    <select value={filterTag} onChange={(e) => setFilterTag(e.target.value)} className="p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#008080] focus:border-transparent">
                        <option value="all">Todas las Fases</option>
                        {Object.keys(FUNNEL_TAGS).map(tag => <option key={tag} value={tag}>{tag}</option>)}
                    </select>
                </div>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="bg-gray-100"><tr><th className="p-3 font-semibold text-gray-600">Nombre</th><th className="p-3 font-semibold text-gray-600 hidden md:table-cell">Clínica</th><th className="p-3 font-semibold text-gray-600 hidden lg:table-cell">Contacto Preferente</th><th className="p-3 font-semibold text-gray-600">Fase</th><th className="p-3 font-semibold text-gray-600">Acciones</th></tr></thead>
                        <tbody>
                            {clients.length > 0 ? clients.map(client => (<ClientRow key={client.id} client={client} onView={onViewClient} onEdit={onEditClient} onDelete={onDeleteClient} />)) : (<tr><td colSpan="5" className="text-center p-6 text-gray-500">No se han encontrado clientes.</td></tr>)}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
}

function ClientRow({ client, onView, onEdit, onDelete }) {
    const tagClass = FUNNEL_TAGS[client.tag] || 'bg-gray-200 text-gray-800';
    const preferenceIcon = client.contactPreference ? CONTACT_PREFERENCES[client.contactPreference] : null;
    return (
        <tr className="border-b hover:bg-gray-50 cursor-pointer" onClick={() => onView(client)}>
            <td className="p-3"><div className="font-bold text-gray-800">{client.name}</div></td>
            <td className="p-3 text-gray-700 hidden md:table-cell">{client.clinic}</td>
            <td className="p-3 text-gray-700 hidden lg:table-cell"><span className="flex items-center gap-2">{preferenceIcon}{client.contactPreference}</span></td>
            <td className="p-3"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${tagClass}`}>{client.tag}</span></td>
            <td className="p-3"><div className="flex items-center gap-2"><button onClick={(e) => { e.stopPropagation(); onEdit(client); }} className="text-blue-600 p-1"><EditIcon /></button><button onClick={(e) => { e.stopPropagation(); onDelete(client.id); }} className="text-red-600 p-1"><TrashIcon /></button></div></td>
        </tr>
    );
}

function StatCard({ title, value, icon }) {
    return (
        <div className="bg-white p-6 rounded-lg shadow flex items-center justify-between">
            <div><p className="text-sm font-medium text-gray-500">{title}</p><p className="text-3xl font-bold text-gray-900">{value}</p></div>
            <div className="text-[#008080] bg-teal-100 p-3 rounded-full">{icon}</div>
        </div>
    );
}

function ClientDetail({ client, db, userId, onEdit, onDelete, onBack, onCreateInvoice, onGenerateConsent }) {
    if (!client) return null;
    const [reminders, setReminders] = useState([]);
    const [newReminder, setNewReminder] = useState({ text: '', dueDate: '' });

    useEffect(() => {
        if (!db || !userId || !client.id) return;
        const path = `/artifacts/${appId}/users/${userId}/clients/${client.id}/reminders`;
        const q = query(collection(db, path));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            setReminders(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        });
        return () => unsubscribe();
    }, [db, userId, client.id]);

    const handleAddReminder = async (e) => {
        e.preventDefault();
        if (!newReminder.text || !newReminder.dueDate) return;
        const path = `/artifacts/${appId}/users/${userId}/clients/${client.id}/reminders`;
        await addDoc(collection(db, path), newReminder);
        setNewReminder({ text: '', dueDate: '' });
    };

    const handleDeleteReminder = async (reminderId) => {
        const path = `/artifacts/${appId}/users/${userId}/clients/${client.id}/reminders/${reminderId}`;
        await deleteDoc(doc(db, path));
    };

    return (
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-4xl mx-auto">
            <div className="flex justify-between items-start mb-6">
                <div><h2 className="text-3xl font-bold text-gray-900">{client.name}</h2><p className="text-lg text-gray-600 flex items-center gap-2 mt-1"><BuildingIcon /> {client.clinic}</p></div>
                <button onClick={onBack} className="text-gray-600 hover:text-gray-900">&larr; Volver al Dashboard</button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-3"><h3 className="text-xl font-semibold text-gray-800 border-b pb-2">Datos de Contacto</h3><div className="flex items-center gap-2"><MailIcon /> <a href={`mailto:${client.email}`} className="text-[#008080] hover:underline">{client.email}</a></div><div className="flex items-center gap-2"><PhoneIcon /> <span className="text-gray-700">{client.phone}</span></div><div className="flex items-start gap-2"><MapPinIcon /> <div className="text-gray-700">{client.address}<br />{client.postalCode} {client.city}, {client.province}</div></div></div>
                <div className="space-y-3"><h3 className="text-xl font-semibold text-gray-800 border-b pb-2">Información Comercial</h3><p><span className="font-semibold">Fase:</span> <span className={`px-2 py-1 text-xs font-semibold rounded-full ${FUNNEL_TAGS[client.tag]}`}>{client.tag}</span></p><p className="flex items-center gap-2"><span className="font-semibold">Contacto Preferente:</span> {CONTACT_PREFERENCES[client.contactPreference]} {client.contactPreference}</p><div className="font-semibold">Interés en:</div><div className="flex flex-wrap gap-2">{client.productInterest && client.productInterest.map(brand => (<span key={brand} className="bg-gray-200 text-gray-800 px-3 py-1 rounded-full text-sm">{brand}</span>))}{client.consentGiven && <p className="text-green-600 flex items-center gap-2 text-sm pt-2"><CheckSquareIcon /> Consentimiento de datos otorgado.</p>}</div></div>
            </div>
            <div className="mt-8">
                <h3 className="text-xl font-semibold text-gray-800 border-b pb-2 mb-3 flex items-center gap-2"><BellIcon /> Tareas / Recordatorios</h3>
                <div className="space-y-2 mb-4 max-h-40 overflow-y-auto">
                    {reminders.length > 0 ? reminders.map(r => (
                        <div key={r.id} className="bg-gray-50 p-2 rounded-md flex justify-between items-center">
                            <div><p>{r.text}</p><p className="text-xs text-red-600">Vence: {r.dueDate}</p></div>
                            <button onClick={() => handleDeleteReminder(r.id)} className="text-red-500 hover:bg-red-100 p-1 rounded-full"><TrashIcon /></button>
                        </div>
                    )) : <p className="text-sm text-gray-500">No hay recordatorios.</p>}
                </div>
                <form onSubmit={handleAddReminder} className="flex gap-2">
                    <input type="text" value={newReminder.text} onChange={e => setNewReminder({...newReminder, text: e.target.value})} placeholder="Nueva tarea..." className="flex-grow p-2 border rounded-md" required/>
                    <input type="date" value={newReminder.dueDate} onChange={e => setNewReminder({...newReminder, dueDate: e.target.value})} className="p-2 border rounded-md" required/>
                    <button type="submit" className="bg-[#008080] text-white p-2 rounded-md">Añadir</button>
                </form>
            </div>
            <div className="mt-8 flex justify-end gap-4">
                <button onClick={onGenerateConsent} className="bg-yellow-500 text-white font-bold py-2 px-4 rounded-lg">Generar Consentimiento</button>
                <button onClick={onEdit} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Editar</button>
                <button onClick={onCreateInvoice} className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg">Crear Factura</button>
            </div>
        </div>
    );
}

function ClientForm({ client = {}, onSave, onCancel }) {
    const [formData, setFormData] = useState({
        id: client.id || null, name: client.name || '', clinic: client.clinic || '',
        email: client.email || '', phone: client.phone || '', address: client.address || '',
        city: client.city || '', postalCode: client.postalCode || '', province: client.province || '',
        tag: client.tag || 'Lead', contactPreference: client.contactPreference || 'Email',
        productInterest: client.productInterest || [], notes: client.notes || '', consentGiven: client.consentGiven || false,
        acceptsMarketing: client.acceptsMarketing || false,
    });
   
    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
    };

    const handleBrandChange = (e) => {
        const { value, checked } = e.target;
        setFormData(prev => {
            const interests = prev.productInterest;
            if (checked) return { ...prev, productInterest: [...interests, value] };
            else return { ...prev, productInterest: interests.filter(b => b !== value) };
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!formData.consentGiven) {
            alert('Debe obtener el consentimiento del cliente para guardar sus datos según el RGPD.');
            return;
        }
        onSave(formData);
    };

    return (
        <form onSubmit={handleSubmit} className="max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-lg space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">{client.id ? 'Editar Cliente' : 'Añadir Nuevo Cliente'}</h2>
            <fieldset className="grid grid-cols-1 md:grid-cols-2 gap-6 border p-4 rounded-md"><legend className="text-lg font-semibold px-2">Información de Contacto</legend><FormField label="Nombre del Contacto" name="name" value={formData.name} onChange={handleChange} required /><FormField label="Clínica / Empresa" name="clinic" value={formData.clinic} onChange={handleChange} required /><FormField label="Email" name="email" type="email" value={formData.email} onChange={handleChange} required /><FormField label="Teléfono" name="phone" value={formData.phone} onChange={handleChange} /></fieldset>
            <fieldset className="grid grid-cols-1 md:grid-cols-2 gap-6 border p-4 rounded-md"><legend className="text-lg font-semibold px-2">Dirección</legend><div className="md:col-span-2"><FormField label="Dirección" name="address" value={formData.address} onChange={handleChange} /></div><FormField label="Ciudad" name="city" value={formData.city} onChange={handleChange} /><FormField label="Código Postal" name="postalCode" value={formData.postalCode} onChange={handleChange} /><FormField label="Provincia" name="province" value={formData.province} onChange={handleChange} /></fieldset>
            <fieldset className="grid grid-cols-1 md:grid-cols-2 gap-6 border p-4 rounded-md"><legend className="text-lg font-semibold px-2">Datos Comerciales</legend><FormSelect label="Fase del Embudo" name="tag" value={formData.tag} onChange={handleChange} options={Object.keys(FUNNEL_TAGS)} /><FormSelect label="Contacto Preferente" name="contactPreference" value={formData.contactPreference} onChange={handleChange} options={Object.keys(CONTACT_PREFERENCES)} /><div className="md:col-span-2"><label className="block text-sm font-medium text-gray-700 mb-2">Interesado en</label><div className="flex flex-wrap gap-4">{['STORZ MEDICAL', 'ZAMAR'].map(brand => (<label key={brand} className="flex items-center gap-2"><input type="checkbox" value={brand} checked={formData.productInterest.includes(brand)} onChange={handleBrandChange} className="h-4 w-4 rounded border-gray-300 text-[#008080] focus:ring-[#008080]" />{brand}</label>))}</div></div></fieldset>
            <div><label htmlFor="notes" className="block text-sm font-medium text-gray-700">Notas</label><textarea id="notes" name="notes" rows="4" value={formData.notes} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#008080] focus:ring-[#008080] sm:text-sm" placeholder="Añadir notas..."></textarea></div>
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 space-y-3">
                <div className="flex items-start"><input id="consentGiven" name="consentGiven" type="checkbox" checked={formData.consentGiven} onChange={handleChange} className="h-4 w-4 mt-1 rounded" /><label htmlFor="consentGiven" className="ml-3 text-sm text-yellow-800">Confirmo que el cliente ha dado su consentimiento para el tratamiento de sus datos para la gestión del servicio.</label></div>
                <div className="flex items-start"><input id="acceptsMarketing" name="acceptsMarketing" type="checkbox" checked={formData.acceptsMarketing} onChange={handleChange} className="h-4 w-4 mt-1 rounded" /><label htmlFor="acceptsMarketing" className="ml-3 text-sm text-yellow-800">Confirmo que el cliente ha dado su consentimiento explícito para recibir comunicaciones comerciales.</label></div>
            </div>
            <div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onCancel} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button><button type="submit" className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg hover:bg-[#006666]">Guardar Cliente</button></div>
        </form>
    );
}

function ConsentForm({ client, onBack }) {
    const consentText = `CONSENTIMIENTO PARA EL TRATAMIENTO DE DATOS PERSONALES\n\nYo, ${client.name || '[Nombre del Cliente]'}, con DNI/CIF [DNI/CIF del Cliente], en mi propio nombre y representación, o en representación de la entidad ${client.clinic || '[Nombre de la Clínica]'}, por la presente otorgo mi consentimiento explícito a EXPERTIA MEDICAL SOLUTIONS SL para el tratamiento de mis datos personales.\n\nFinalidades:\n[X] Gestión de la relación comercial y contractual (necesario para el servicio).\n[ ] Envío de comunicaciones comerciales sobre productos, servicios y novedades de EXPERTIA MEDICAL SOLUTIONS SL.\n\nPuede ejercer sus derechos de acceso, rectificación, supresión, limitación del tratamiento, portabilidad y oposición dirigiéndose a [Email de Contacto de Expertia] o a la dirección postal [Dirección de Expertia].\n\nEn [Ciudad], a ${new Date().toLocaleDateString('es-ES')}\n\nFdo.: ${client.name || '[Firma del Cliente]'}`;
    const [text, setText] = useState(consentText);

    const handleSendEmail = () => {
        window.location.href = `mailto:${client.email}?subject=Consentimiento Informado - Expertia Medical Solutions&body=${encodeURIComponent(text)}`;
    };

    const handleCopyToClipboard = () => {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => alert('Texto copiado al portapapeles.')).catch(err => console.error('Error al copiar', err));
        } else {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                document.execCommand('copy');
                alert('Texto copiado al portapapeles.');
            } catch (err) {
                console.error('Fallback: Oops, unable to copy', err);
            }
            document.body.removeChild(textArea);
        }
    };

    return (
        <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Generar Consentimiento Informado</h2>
            <textarea value={text} onChange={(e) => setText(e.target.value)} rows="20" className="w-full p-3 border rounded-md bg-gray-50"></textarea>
            <div className="mt-6 flex justify-between items-center">
                <button onClick={onBack} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg">Volver</button>
                <div className="flex gap-4">
                    <button onClick={handleCopyToClipboard} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Copiar Texto</button>
                    <button onClick={handleSendEmail} className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg">Enviar por Email</button>
                </div>
            </div>
        </div>
    );
}

function ProfileForm({ userProfile, onSave, onBack }) {
    const [profile, setProfile] = useState({ name: '', email: '', phone: '', photoURL: '' });
   
    useEffect(() => {
        if (userProfile) {
            setProfile(userProfile);
        }
    }, [userProfile]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setProfile({ ...profile, [name]: value });
    };

    const handlePhotoChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                // En una app real, subiríamos esto a Firebase Storage y guardaríamos la URL.
                // Aquí, lo guardamos como data URL (Base64) por simplicidad.
                setProfile({ ...profile, photoURL: reader.result });
            };
            reader.readAsDataURL(file);
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave(profile);
    };

    return (
        <form onSubmit={handleSubmit} className="max-w-lg mx-auto bg-white p-8 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Mi Perfil de Comercial</h2>
            <div className="space-y-4">
                <div className="flex flex-col items-center gap-4">
                    <img src={profile.photoURL || 'https://placehold.co/128x128/008080/FFFFFF?text=Foto'} alt="Perfil" className="w-32 h-32 rounded-full object-cover" />
                    <input type="file" accept="image/*" onChange={handlePhotoChange} className="text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-teal-50 file:text-teal-700 hover:file:bg-teal-100"/>
                </div>
                <FormField label="Nombre Completo" name="name" value={profile.name || ''} onChange={handleChange} required />
                <FormField label="Email" name="email" type="email" value={profile.email || ''} onChange={handleChange} required />
                <FormField label="Teléfono" name="phone" type="tel" value={profile.phone || ''} onChange={handleChange} />
            </div>
            <div className="flex justify-end gap-4 pt-6">
                <button type="button" onClick={onBack} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg">Cancelar</button>
                <button type="submit" className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg">Guardar Perfil</button>
            </div>
        </form>
    );
}

function BulkCommunication({ clients, onBack }) {
    const [message, setMessage] = useState('');
    const [filter, setFilter] = useState('all');
   
    const eligibleClients = useMemo(() => {
        return clients.filter(c => c.acceptsMarketing && (filter === 'all' || c.tag === filter));
    }, [clients, filter]);

    const handleSendEmail = () => {
        const emails = eligibleClients.map(c => c.email).join(',');
        if (!emails) { alert('No hay clientes elegibles para enviar email.'); return; }
        window.location.href = `mailto:?bcc=${emails}&subject=Novedades de Expertia Medical Solutions&body=${encodeURIComponent(message)}`;
    };

    const handleSendWhatsapp = () => {
        if (!message) { alert('El mensaje no puede estar vacío.'); return; }
        window.open(`https://wa.me/?text=${encodeURIComponent(message)}`, '_blank');
    };

    return (
        <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Comunicación Masiva</h2>
            <p className="text-sm text-gray-600 mb-4">Esta herramienta enviará mensajes únicamente a los clientes que hayan aceptado recibir comunicaciones comerciales.</p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <FormSelect label="Filtrar por Fase" value={filter} onChange={(e) => setFilter(e.target.value)} options={['all', ...Object.keys(FUNNEL_TAGS)]} />
                <div className="md:col-span-2 flex items-end"><p className="text-green-600 font-semibold">{eligibleClients.length} clientes seleccionados.</p></div>
            </div>
            <textarea value={message} onChange={(e) => setMessage(e.target.value)} rows="8" placeholder="Escribe tu mensaje aquí..." className="w-full p-3 border rounded-md"></textarea>
            <div className="mt-6 flex justify-between items-center">
                <button onClick={onBack} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg">Volver</button>
                <div className="flex gap-4">
                    <button onClick={handleSendWhatsapp} className="bg-green-500 text-white font-bold py-2 px-4 rounded-lg">Enviar por WhatsApp</button>
                    <button onClick={handleSendEmail} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Enviar por Email (BCC)</button>
                </div>
            </div>
        </div>
    );
}

function AccountingDashboard({ invoices, clients, products, onSaveProduct, onDeleteProduct, onCreateInvoice, onViewInvoice, onDeleteInvoice }) {
    const [activeTab, setActiveTab] = useState('invoices');
    const [newProduct, setNewProduct] = useState({ name: '', price: 0 });
    const getClientName = (clientId) => clients.find(c => c.id === clientId)?.name || 'N/A';

    const handleAddProduct = (e) => {
        e.preventDefault();
        if (!newProduct.name || newProduct.price <= 0) return;
        onSaveProduct(newProduct);
        setNewProduct({ name: '', price: 0 });
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center"><h1 className="text-3xl font-bold text-gray-900">Contabilidad</h1></div>
            <div className="border-b border-gray-200"><nav className="-mb-px flex space-x-8" aria-label="Tabs"><button onClick={() => setActiveTab('invoices')} className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${activeTab === 'invoices' ? 'border-[#008080] text-[#008080]' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}>Facturas</button><button onClick={() => setActiveTab('products')} className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${activeTab === 'products' ? 'border-[#008080] text-[#008080]' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}>Productos</button></nav></div>
            {activeTab === 'invoices' && (
                <div className="bg-white p-6 rounded-lg shadow">
                    <button onClick={onCreateInvoice} className="flex items-center gap-2 bg-[#008080] text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-[#006666] mb-4"><PlusIcon />Crear Factura</button>
                    <div className="overflow-x-auto"><table className="w-full text-left"><thead className="bg-gray-100"><tr><th className="p-3">Nº Factura</th><th className="p-3">Cliente</th><th className="p-3">Fecha</th><th className="p-3">Total</th><th className="p-3">Estado</th><th className="p-3">Acciones</th></tr></thead><tbody>{invoices.length > 0 ? invoices.map(inv => (<tr key={inv.id} className="border-b hover:bg-gray-50"><td className="p-3 font-mono text-sm cursor-pointer" onClick={() => onViewInvoice(inv)}>{inv.invoiceNumber}</td><td className="p-3">{getClientName(inv.clientId)}</td><td className="p-3">{inv.invoiceDate}</td><td className="p-3 font-semibold">{inv.total.toFixed(2)} €</td><td className="p-3"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${INVOICE_STATUSES[inv.status]}`}>{inv.status}</span></td><td className="p-3"><button onClick={() => onDeleteInvoice(inv.id)} className="text-red-500 p-1"><TrashIcon /></button></td></tr>)) : (<tr><td colSpan="6" className="text-center p-6 text-gray-500">No hay facturas.</td></tr>)}</tbody></table></div>
                </div>
            )}
            {activeTab === 'products' && (
                <div className="bg-white p-6 rounded-lg shadow">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800">Gestionar Productos</h3>
                    <form onSubmit={handleAddProduct} className="flex gap-2 mb-4">
                        <input type="text" value={newProduct.name} onChange={e => setNewProduct({ ...newProduct, name: e.target.value })} placeholder="Nombre del producto" className="flex-grow p-2 border rounded-md" required />
                        <input type="number" step="0.01" value={newProduct.price} onChange={e => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) || 0 })} placeholder="Precio" className="w-32 p-2 border rounded-md" required />
                        <button type="submit" className="bg-[#008080] text-white p-2 rounded-md">Añadir</button>
                    </form>
                    <ul className="space-y-2">
                        {products.map(p => <li key={p.id} className="flex justify-between items-center p-2 bg-gray-50 rounded-md"><span>{p.name} - <strong>{p.price.toFixed(2)}€</strong></span><button onClick={() => onDeleteProduct(p.id)} className="text-red-500"><TrashIcon /></button></li>)}
                    </ul>
                </div>
            )}
        </div>
    );
}

function InvoiceForm({ clients, products, onSave, onCancel, invoiceData }) {
    const [formData, setFormData] = useState({
        id: invoiceData?.id || null, clientId: invoiceData?.client?.id || '',
        invoiceNumber: invoiceData?.invoiceNumber || '',
        invoiceDate: invoiceData?.invoiceDate || new Date().toISOString().split('T')[0],
        dueDate: invoiceData?.dueDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        status: invoiceData?.status || 'Borrador',
        type: invoiceData?.type || 'Factura',
        invoiceSeries: invoiceData?.invoiceSeries || 'EXP',
        items: invoiceData?.items || [{ description: '', quantity: 1, price: 0, productId: '' }],
    });

    const subtotal = useMemo(() => formData.items.reduce((acc, item) => acc + (item.quantity * item.price), 0), [formData.items]);
    const vat = useMemo(() => subtotal * VAT_RATE, [subtotal]);
    const total = useMemo(() => subtotal + vat, [subtotal, vat]);

    const handleChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
   
    const handleItemChange = (index, e) => {
        const { name, value } = e.target;
        const items = [...formData.items];
        if (name === "productId") {
            const product = products.find(p => p.id === value);
            items[index].productId = value;
            items[index].description = product ? product.name : '';
            items[index].price = product ? product.price : 0;
        } else {
            items[index][name] = value;
        }
        setFormData(prev => ({ ...prev, items }));
    };

    const addItem = () => { setFormData(prev => ({ ...prev, items: [...prev.items, { description: '', quantity: 1, price: 0, productId: '' }] })); };
    const removeItem = (index) => { const items = [...formData.items]; items.splice(index, 1); setFormData(prev => ({ ...prev, items })); };
    const handleSubmit = (e) => { e.preventDefault(); onSave({ ...formData, subtotal, vat, total }); };

    return (
        <form onSubmit={handleSubmit} className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">{invoiceData?.id ? 'Editar Factura' : 'Crear Nueva Factura'}</h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="md:col-span-2"><label className="block text-sm font-medium text-gray-700">Cliente</label><select name="clientId" value={formData.clientId} onChange={handleChange} className="mt-1 block w-full rounded-md border-gray-300" required><option value="">Seleccionar cliente...</option>{clients.map(c => <option key={c.id} value={c.id}>{c.name} - {c.clinic}</option>)}</select></div>
                <FormField label="Fecha Factura" name="invoiceDate" type="date" value={formData.invoiceDate} onChange={handleChange} />
                <FormField label="Fecha Vencimiento" name="dueDate" type="date" value={formData.dueDate} onChange={handleChange} />
                <FormSelect label="Tipo Documento" name="type" value={formData.type} onChange={handleChange} options={['Factura', 'Factura Proforma']} />
                <FormSelect label="Serie Factura" name="invoiceSeries" value={formData.invoiceSeries} onChange={handleChange} options={['EXP', 'ALQ']} />
                <FormSelect label="Estado" name="status" value={formData.status} onChange={handleChange} options={Object.keys(INVOICE_STATUSES)} />
            </div>
            <div className="border-t pt-4">
                <h3 className="text-lg font-semibold mb-2">Líneas de la factura</h3>
                {formData.items.map((item, index) => (
                    <div key={index} className="grid grid-cols-12 gap-2 mb-2 items-center">
                        <div className="col-span-6"><select name="productId" value={item.productId} onChange={(e) => handleItemChange(index, e)} className="w-full p-2 border rounded-md bg-white shadow-sm"><option value="">Seleccionar producto</option>{products.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}</select></div>
                        <div className="col-span-2"><FormField placeholder="Cant." name="quantity" type="number" value={item.quantity} onChange={(e) => handleItemChange(index, e)} /></div>
                        <div className="col-span-2"><FormField placeholder="Precio" name="price" type="number" value={item.price} onChange={(e) => handleItemChange(index, e)} /></div>
                        <div className="col-span-1 font-semibold text-right">{(item.quantity * item.price).toFixed(2)}€</div>
                        <div className="col-span-1"><button type="button" onClick={() => removeItem(index)} className="text-red-500 p-2 rounded-full hover:bg-red-100"><TrashIcon /></button></div>
                    </div>
                ))}
                <button type="button" onClick={addItem} className="text-sm text-[#008080] font-bold">+ Añadir línea</button>
            </div>
            <div className="flex justify-end"><div className="w-full md:w-1/3 space-y-2 text-right"><div className="flex justify-between"><span className="font-semibold">Subtotal:</span><span>{subtotal.toFixed(2)} €</span></div><div className="flex justify-between"><span className="font-semibold">IVA ({VAT_RATE * 100}%):</span><span>{vat.toFixed(2)} €</span></div><div className="flex justify-between border-t pt-2 mt-2"><span className="font-bold text-lg">Total:</span><span className="font-bold text-lg">{total.toFixed(2)} €</span></div></div></div>
            <div className="flex justify-end gap-4 pt-4"><button type="button" onClick={onCancel} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancelar</button><button type="submit" className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg hover:bg-[#006666]">Guardar Factura</button></div>
        </form>
    );
}

function InvoiceDetail({ invoice, clients, onBack, onRegisterPayment, db, userId, onConvertToInvoice }) {
    if (!invoice) return null;
    const client = clients.find(c => c.id === invoice.clientId);
    const [payments, setPayments] = useState([]);
    const [paymentAmount, setPaymentAmount] = useState(0);
    const amountPaid = invoice.totalPaid || 0;
    const amountDue = invoice.total - amountPaid;
    useEffect(() => { if (!db || !userId || !invoice.id) return; const paymentsPath = `/artifacts/${appId}/users/${userId}/invoices/${invoice.id}/payments`; const q = query(collection(db, paymentsPath)); const unsubscribe = onSnapshot(q, (snapshot) => { setPayments(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))); }); return () => unsubscribe(); }, [db, userId, invoice.id]);
    const handlePaymentSubmit = (e) => { e.preventDefault(); const amount = parseFloat(paymentAmount); if (amount > 0 && amount <= amountDue) { onRegisterPayment(invoice, amount); setPaymentAmount(0); } else { alert("El importe del pago no es válido."); } };
    return (
        <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <div className="flex justify-between items-start mb-8"><div><img src="https://storage.googleapis.com/gemini-generative-ai-api/f55a1dda-6560-4321-aidb-53f36780a82f" alt="Logo" className="h-14 mb-4" /><h2 className="text-2xl font-bold text-gray-900 uppercase">{invoice.type}</h2><p className="text-gray-500">Nº: {invoice.invoiceNumber}</p></div><div className="text-right"><h3 className="text-xl font-bold">Expertia Medical Solutions SL</h3><p className="text-sm">Calle Ficticia 123, 28080 Madrid</p><p className="text-sm">B12345678</p></div></div>
            <div className="grid grid-cols-2 gap-8 mb-8"><div className="bg-gray-50 p-4 rounded-lg"><h4 className="font-semibold text-gray-600 mb-2">Facturar a:</h4>{client ? (<><p className="font-bold">{client.clinic}</p><p>{client.address}</p><p>{client.postalCode} {client.city}</p><p>Att: {client.name}</p></>) : <p>Cliente no encontrado</p>}</div><div className="bg-gray-50 p-4 rounded-lg text-right"><p><span className="font-semibold">Fecha Factura:</span> {invoice.invoiceDate}</p><p><span className="font-semibold">Vencimiento:</span> {invoice.dueDate}</p><p className="mt-2"><span className="font-semibold">Estado:</span> <span className={`px-2 py-1 text-xs font-semibold rounded-full ${INVOICE_STATUSES[invoice.status]}`}>{invoice.status}</span></p></div></div>
            <table className="w-full text-left mb-8"><thead className="bg-gray-100"><tr><th className="p-3">Descripción</th><th className="p-3 text-center">Cantidad</th><th className="p-3 text-right">Precio Unitario</th><th className="p-3 text-right">Total</th></tr></thead><tbody>{invoice.items.map((item, index) => (<tr key={index} className="border-b"><td className="p-3">{item.description}</td><td className="p-3 text-center">{item.quantity}</td><td className="p-3 text-right">{parseFloat(item.price).toFixed(2)} €</td><td className="p-3 text-right">{(item.quantity * item.price).toFixed(2)} €</td></tr>))}</tbody></table>
            <div className="flex justify-between items-start"><div className="w-1/2 pr-4"><h4 className="font-semibold text-gray-600 mb-2">Pagos Registrados</h4>{payments.length > 0 ? (<ul className="text-sm space-y-1">{payments.map(p => <li key={p.id} className="flex justify-between p-1 bg-gray-50 rounded"><span>{p.date}:</span> <span className="font-semibold">{p.amount.toFixed(2)} €</span></li>)}</ul>) : <p className="text-sm text-gray-500">No hay pagos registrados.</p>}{amountDue > 0 && (<form onSubmit={handlePaymentSubmit} className="mt-4"><h4 className="font-semibold text-gray-600 mb-2">Registrar Nuevo Pago</h4><div className="flex gap-2"><input type="number" step="0.01" max={amountDue.toFixed(2)} value={paymentAmount} onChange={(e) => setPaymentAmount(e.target.value)} className="w-full rounded-md border-gray-300" placeholder="Importe" /><button type="submit" className="bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700">Pagar</button></div></form>)}</div><div className="w-1/2 md:w-1/3 space-y-2 text-right"><div className="flex justify-between"><span className="font-semibold">Subtotal:</span><span>{invoice.subtotal.toFixed(2)} €</span></div><div className="flex justify-between"><span className="font-semibold">IVA ({VAT_RATE * 100}%):</span><span>{invoice.vat.toFixed(2)} €</span></div><div className="flex justify-between"><span className="font-semibold">Total Factura:</span><span className="font-semibold">{invoice.total.toFixed(2)} €</span></div><div className="flex justify-between text-green-600"><span className="font-semibold">Total Pagado:</span><span className="font-semibold">{amountPaid.toFixed(2)} €</span></div><div className="flex justify-between border-t-2 border-gray-800 pt-2 mt-2"><span className="font-bold text-xl">Pendiente:</span><span className="font-bold text-xl text-red-600">{amountDue.toFixed(2)} €</span></div></div></div>
            <div className="mt-12 flex justify-end gap-4"><button onClick={onBack} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Volver</button>{invoice.type === 'Factura Proforma' && <button onClick={() => onConvertToInvoice(invoice)} className="bg-green-600 text-white font-bold py-2 px-4 rounded-lg">Convertir a Factura</button>}<button onClick={() => window.print()} className="bg-[#008080] text-white font-bold py-2 px-4 rounded-lg hover:bg-[#006666]">Imprimir / PDF</button></div>
        </div>
    );
}

function ReportsDashboard({ allInvoices }) {
    const [productFilter, setProductFilter] = useState('all');
    const [salespersonFilter, setSalespersonFilter] = useState('all');
    const paidInvoices = allInvoices.filter(inv => inv.status === 'Pagada');

    const productOptions = useMemo(() => {
        const products = new Set();
        paidInvoices.forEach(inv => inv.items.forEach(item => { if(item.description) products.add(item.description)}));
        return ['all', ...Array.from(products)];
    }, [paidInvoices]);

    const salespersonOptions = useMemo(() => {
        const salespersons = new Set();
        paidInvoices.forEach(inv => { if(inv.createdBy) salespersons.add(inv.createdBy)});
        return ['all', ...Array.from(salespersons)];
    }, [paidInvoices]);

    const filteredInvoices = useMemo(() => {
        return paidInvoices.filter(inv => {
            const productMatch = productFilter === 'all' || inv.items.some(item => item.description === productFilter);
            const salespersonMatch = salespersonFilter === 'all' || inv.createdBy === salespersonFilter;
            return productMatch && salespersonMatch;
        });
    }, [paidInvoices, productFilter, salespersonFilter]);

    const salesByMonth = useMemo(() => {
        const monthlyData = {};
        const monthNames = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
        filteredInvoices.forEach(inv => {
            const date = new Date(inv.invoiceDate);
            if (isNaN(date.getTime())) return;
            const month = date.getMonth();
            const year = date.getFullYear();
            const key = `${year}-${monthNames[month]}`;
            if (!monthlyData[key]) monthlyData[key] = 0;
            monthlyData[key] += inv.total;
        });
        return Object.entries(monthlyData).map(([name, Ventas]) => ({ name, Ventas: parseFloat(Ventas.toFixed(2)) })).sort((a, b) => monthNames.indexOf(a.name.split('-')[1]) - monthNames.indexOf(b.name.split('-')[1]));
    }, [filteredInvoices]);

    const salesByQuarter = useMemo(() => {
        const quarterlyData = {};
        filteredInvoices.forEach(inv => {
            const date = new Date(inv.invoiceDate);
            if (isNaN(date.getTime())) return;
            const year = date.getFullYear();
            const quarter = Math.floor(date.getMonth() / 3) + 1;
            const key = `${year}-T${quarter}`;
            if (!quarterlyData[key]) quarterlyData[key] = 0;
            quarterlyData[key] += inv.total;
        });
        return Object.entries(quarterlyData).map(([name, Ventas]) => ({ name, Ventas: parseFloat(Ventas.toFixed(2)) })).sort((a, b) => a.name.localeCompare(b.name));
    }, [filteredInvoices]);

    const totalSales = useMemo(() => filteredInvoices.reduce((sum, inv) => sum + inv.total, 0), [filteredInvoices]);

    return (
        <div className="space-y-6">
            <h1 className="text-3xl font-bold text-gray-900">Informes de Ventas</h1>
            <div className="bg-white p-4 rounded-lg shadow-sm grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormSelect label="Filtrar por Producto" value={productFilter} onChange={(e) => setProductFilter(e.target.value)} options={productOptions.map(p => ({value: p, label: p === 'all' ? 'Todos los productos' : p}))} />
                <FormSelect label="Filtrar por Comercial" value={salespersonFilter} onChange={(e) => setSalespersonFilter(e.target.value)} options={salespersonOptions.map(s => ({value: s, label: s === 'all' ? 'Todos los comerciales' : s.substring(0,10) + '...'}))} />
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <StatCard title="Ventas Totales (Filtradas)" value={`${totalSales.toFixed(2)} €`} icon={<DollarSignIcon />} />
                <StatCard title="Nº Facturas Pagadas" value={filteredInvoices.length} icon={<CheckSquareIcon />} />
                <StatCard title="Ticket Medio" value={filteredInvoices.length > 0 ? `${(totalSales / filteredInvoices.length).toFixed(2)} €` : '0.00 €'} icon={<UserIcon />} />
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4 text-gray-800">Ventas por Mes (Filtradas)</h3>
                <div style={{ width: '100%', height: 300 }}><ResponsiveContainer><LineChart data={salesByMonth} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" /><XAxis dataKey="name" /><YAxis /><Tooltip formatter={(value) => `${value} €`} /><Legend /><Line type="monotone" dataKey="Ventas" stroke="#008080" strokeWidth={2} /></LineChart></ResponsiveContainer></div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4 text-gray-800">Ventas por Trimestre (Filtradas)</h3>
                <div style={{ width: '100%', height: 300 }}><ResponsiveContainer><BarChart data={salesByQuarter} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" /><XAxis dataKey="name" /><YAxis /><Tooltip formatter={(value) => `${value} €`} /><Legend /><Bar dataKey="Ventas" fill="#006666" /></BarChart></ResponsiveContainer></div>
            </div>
        </div>
    );
}

function FormField({ label, ...props }) {
    return (
        <div>{label && <label htmlFor={props.name} className="block text-sm font-medium text-gray-700 mb-1">{label}</label>}<input id={props.name} {...props} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-[#008080] focus:ring-[#008080] sm:text-sm" /></div>
    );
}

function FormSelect({ label, options, ...props }) {
    return (
        <div>
            <label htmlFor={props.name} className="block text-sm font-medium text-gray-700">{label}</label>
            <select id={props.name} {...props} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#008080] focus:ring-[#008080] sm:text-sm">
                {options.map(opt => <option key={opt.value || opt} value={opt.value || opt}>{opt.label || opt}</option>)}
            </select>
        </div>
    );
}